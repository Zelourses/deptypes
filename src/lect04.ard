\import Arith.Nat
\import Data.Bool
\import Data.Maybe
\import Data.Or
\import Function.Meta
\import Logic
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths
\open Nat


-- 1. Рекурсивное определение vec, head, tail

-- vec A 0 ::= []
-- vec A 1 ::= [A]
-- vec A 2 ::= [A, A]
\func vec (A : \Type) (n : Nat) : \Type \elim n
  | 0 => \Sigma
  | suc n => \Sigma A (vec A n)

\func vec123 : vec Nat 3 => (1, (2, (3, ())))

\func head {A : \Type} (n : Nat) (xs : vec A (suc n))
  => xs.1

\func tail {A : \Type} (n : Nat) (xs : vec A (suc n))
  => xs.2


-- 2. Индуктивное определение Vec, head, tail, append, length

{-
\data Vec' (A : \Type) (n : Nat)
  | nil
  | cons A (Vec A ???)
-}

\data Vec (A : \Type) (n : Nat) \elim n
  | 0 => nil
  | suc n => cons A (Vec A n)

{- На других языках что-то в таком духе:
Inductive Vec : Set -> Nat -> Set where
| nil  : forall A, Vec A 0
| cons : forall A n, A -> Vec A n -> Vec A (suc n)
-}

-- nil : \Pi {A : \Type} -> Vec A 0
-- nil : Vec A (suc n) -- не может быть
-- cons : \Pi {A : \Type} {n : Nat} -> A -> Vec A n -> Vec A (suc n)

-- Конструкторы принимают параметры типа данных в качестве неявных аргументов
\func emptyList => nil {Nat}

\func Head {A : \Type} {n : Nat} (xs : Vec A (suc n)) : A \elim xs
  | cons a xs => a

\func Tail {A : \Type} {n : Nat} (xs : Vec A (suc n)) : Vec A n \elim xs
  | cons a xs => xs

\func first {A : \Type} {n : Nat} (xs : Vec A n) : Maybe A \elim n, xs
  | 0, nil => nothing
  | suc _, cons x _ => just x

\func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (n + m) \elim n, xs
  | 0, nil => ys
  | suc n, cons x xs => cons x $ xs v++ ys

-- Очень полезная функция
\func Vec-length {A : \Type} {n : Nat} (_ : Vec A n) => n


-- 3. Fin, toNat, lookup

-- Тип n-элементных множеств можно определить различными способами
-- Например, мы можем определить его как подтип натуральных чисел:
-- \func fin (n : Nat) => \Sigma (x : Nat) (x < n)

-- Fin' 0 ::=
-- Fin' 1 ::= nothing
-- Fin' 2 ::= nothing, just nothing
\func Fin' (_ : Nat) : \Set
  | 0 => Empty
  | suc n => Maybe (Fin' n)

-- Еще его можно определить индуктивно:
\data Fin (n : Nat) \with
  | suc n => {
    | fzero
    | fsuc (Fin n)
  }

{-
\data Fin (n : Nat) \with
  | suc n => fzero
  | suc n => fsuc (Fin n)
-}

-- Fin 0 -- пустой тип
\func Fin-absurd {A : \Type} (_ : Fin 0) : A

-- В Fin 3 как минимум 3 элемента
\func fin0 : Fin 3 => fzero
\func fin1 : Fin 3 => fsuc fzero
\func fin2 : Fin 3 => fsuc (fsuc fzero)
-- \func fin3 : Fin 3 => fsuc (fsuc (fsuc {?}))

-- В Fin 3 не более 3 элементов
\func atMost3 (x : Fin 3) : Or (x = fin0) (Or (x = fin1) (x = fin2))
  | fzero => inl idp
  | fsuc fzero => inr (inl idp)
  | fsuc (fsuc fzero) => inr (inr idp)
  | fsuc (fsuc (fsuc ()))

\func toNat {n : Nat} (x : Fin n) : Nat \elim n, x
  | suc n, fzero => 0
  | suc n, fsuc x => suc (toNat x)

-- Безопасный at
\func at {A : \Type} {n : Nat} (xs : Vec A n) (i : Fin n) : A \elim n, xs, i
  | suc n, cons x _, fzero => x
  | suc n, cons _ xs, fsuc i => at xs i


-- 4. Типы данных могут использовать не-структурную рекурсию

\func K (_ : Nat) : \Set
  | 0 => \Sigma
  | suc n => K n -> K n

{-
\data K' (n : Nat) \with
  | 0 => k1
  | suc n => k2 (K' n -> K' n)
-}

{-
\func KK (n : Nat) : \Set
  | 0 => \Sigma
  | suc n => KK (suc n)
-}

\data KK' (n : Nat) \elim n
  | 0 => kk1
  | suc n => kk2 (KK' (suc n))

\func KK'-unique {n : Nat} (xs : KK' (suc n)) : Empty \elim xs
  | kk2 xs => KK'-unique xs


-- 5. Элиминаторы

{-
\func h (b : Bool) : P b
  | true => t : P true
  | false => f : P false

\func h' => Bool-elim P t f
 -}

-- Элиминатор для Bool (рекурсор для Bool -- это просто if)
\func Bool-elim (P : Bool -> \Type)
                (t : P true)
                (f : P false)
                (x : Bool) : P x
\elim x
  | true => t
  | false => f

\func Bool-rec (P : \Type)
               (t : P)
               (f : P)
               (x : Bool) : P
  => Bool-elim (\lam _ => P) t f x

-- \s z. s (s (... (s z) ...))

-- Элиминатор для Nat
\func Nat-elim (P : Nat -> \Type)
               (z : P zero)
               (s : \Pi (n : Nat) -> P n -> P (suc n))
               (x : Nat) : P x
\elim x
  | 0 => z
  | suc x => s x (Nat-elim P z s x)

-- Рекурсор для Nat
\func Nat-rec (P : \Type)
              (z : P)
              (s : Nat -> P -> P)
              (x : Nat) : P
  => Nat-elim (\lam _ => P) z s x

\func add (n m : Nat) : Nat \elim m
  | 0 => n
  | suc m => suc (add n m)

\func add' (n m : Nat) : Nat
  => Nat-rec Nat n (\lam _ r => suc r) m

\func add'' (n m : Nat) : Nat
  => Nat-elim (\lam _ => Nat) n (\lam _ r => suc r) m

\func comm (n m : Nat) : n + m = m + n \elim m
  | 0 => idp
  | suc m => pmap suc (comm n m)

\func comm' (n m : Nat) : n + m = m + n
  => Nat-elim (\lam m => n + m = m + n) idp (\lam _ r => pmap suc r) m

\func Nat-ind (P : Nat -> \Type)
              (s : \Pi (n : Nat) -> (\Pi (k : Nat) -> k < n -> P k) -> P n)
              (x : Nat) : P x
  => aux P s x (suc x) id<suc
  \where {
    \func aux (P : Nat -> \Type)
              (s : \Pi (n : Nat) -> (\Pi (k : Nat) -> k < n -> P k) -> P n)
              (y x : Nat) (p : y < x) : P y
      \elim x
        | suc x => s y $ \lam k q => aux P s k x $ q <∘l (<_suc_<= p)
  }


-- 5. Оператор J

-- Оператор J является обобщением transport
-- Если transport -- это независимый элиминатор, то J -- его зависимая версия

-- Можно сравнить с элиминаторами для Nat
{-
-- Независимая версия:
\func Nat-rec (B : \Type)
    (z : B)
    (s : Nat -> B -> B)
    (n : Nat)
    : B

-- Зависимая версия:
\func Nat-elim (B : Nat -> \Type)
    (z : B 0)
    (s : \Pi (k : Nat) -> B k -> B (suc k))
    (n : Nat)
    : B n
-}

-- Независимая версия:
\func transport''''
  {A : \Type}
  {a a' : A}
  (B : A -> \Type)
  (b : B a)
  (p : a = a')
  : B a'
\elim p
  | idp => b

-- Зависимая версия:
\func J
  {A : \Type} {a : A}
  (B : \Pi (a' : A) -> a = a' -> \Type)
  (b : B a idp)
  {a' : A} (p : a = a')
  : B a' p
\elim p
  | idp => b

-- Если переписать тип B в некаррированом виде, то получится следующая версия того же оператора:
-- Этот элиминатор в точности является элиминатором для Unit
-- Таким образом, J говорит, что в типе \Sigma (a' : A) (a = a') ровно один элемент
\func J'
  {A : \Type} {a : A}
  (B : (\Sigma (a' : A) (a = a')) -> \Type)
  (b : B (a, idp))
  (p : \Sigma (a' : A) (a = a'))
  : B p
\elim p
  | (_, idp) => b

-- Напоминание как выглядит элиминатор для Unit
\data Unit | unit

\func Unit-elim
  (B : Unit -> \Type)
  (b : B unit)
  (p : Unit)
  : B p
\elim p
  | unit => b

\func Unit-singleton (x : Unit) : x = unit
  => Unit-elim (\lam x => x = unit) idp x

\func Unit'-singleton {A : \Type} {a : A} (x : \Sigma (a' : A) (a = a')) : x = (a, idp)
  => J' (\lam x => x = (a, idp)) idp x

-- Это утверждение не типизируется
-- \func =-unique' {A : \Type} {a a' : A} (p : a = a') : p = idp => {?}

-- Это утверждение типизируется, но не верно, т.е. в типе a = a может быть больше одного элемента
{-
\func =-unique {A : \Type} {a : A} (p : a = a) : p = idp
  \elim p
  | idp => {?}
-}

-- J говорит, что для определения функции над p : a = a' достаточно определить ее для idp
-- При этом a' должен варьироваться вместе с p
-- Если мы определим версию J, в которой a' всегда равно a, то мы получим оператор K:
{-
\func K {A : \Type} {a : A} (B : a = a -> \Type)
    (b : B idp)
    (p : a = a) : B p => {?}
-}

-- Этот оператор эквивалентен =-unique
-- Следовательно его невозможно доказать
-- Его можно добавить как аксиому, но мы не будем этого делать
-- Мы будем обсуждать его подробнее позже

\lemma test (x : Nat) (p : x = x) : p = idp => set-pi


-- 7. Сопоставление с idp

\func sym {A : \Type} {a a' : A} (p : a = a') : a' = a \elim p
  | idp => idp

\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' \elim p
  | idp => q

\func trans' {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' \elim q
  | idp => p

\func foo {n : Nat} (p : 0 = n) : n = 0 \elim p
  | idp => idp

\func foo' {n : Nat} (p : n = 0) : 0 = n \elim p
  | idp => idp

{-
\func bar (p : 0 = 1) : Nat \elim p
  | idp => 0
-}


-- 8. Ассоциативность ++ для векторов

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim n
  | 0 => idp
  | suc n => pmap suc (+-assoc n m k)

-- Ассоциативность для v++ даже сформулировать сложно, так как у (xs v++ ys) v++ zs и xs v++ (ys v++ zs) разные типы:
-- Vec A (k + (m + n)) и Vec A ((k + m) + n)

-- Это можно поправить при помощи transport,
-- так как он позволяет любой элемент Vec A x превратить в элемент Vec A y, если x и y равны
\func v++-assoc {A : \Type} {n m k : Nat}
                (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : transport (Vec A) (+-assoc n m k) ((xs v++ ys) v++ zs) = xs v++ (ys v++ zs)
  \elim n, xs
    | 0, nil => idp
    | suc n, cons x xs => aux x (+-assoc n m k) *> pmap (cons x) (v++-assoc _ _ _)

  \where {

    \func aux {A : \Type} {n m : Nat} {xs : Vec A n} (x : A) (p : n = m)
      : transport (Vec A) (pmap suc p) (cons x xs) = cons x (transport (Vec A) p xs)
      \elim p
        | idp => idp
  }
