\import Data.Bool
\import Data.Or
\import Logic
\import hw01 (fac)
\import lect02 (List, cons)

-- 1. Определите полиморфный tail для списков
\func tail-poly {T : \Type} (xs : List T) : List T \elim xs
  | List.nil => List.nil
  | cons _ xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента
\data Ord => LT | EQ | GT

\func length {T : \Type} (xs : List T) : Nat \elim xs
  | List.nil => 0
  | cons _ xs => 1 Nat.+ length xs

\func sort-merge {T : \Type} (cmp : T -> T -> Ord) (xs : List T) : List T \elim  xs
  | List.nil => List.nil
  | cons x List.nil => cons x List.nil
  | other => sort-merge-fuel (length other) cmp other
  \where {
    \func sort-merge-fuel (fuel : Nat) (cmp : T -> T -> Ord) (xs : List T) : List T \elim fuel
      | zero => xs
      | suc fuel =>
        \let (lhs, rhs) => splitAlmostFast xs
        \in merge-list (sort-merge-fuel fuel cmp lhs) (sort-merge-fuel fuel cmp rhs)

    \func splitAlmostFast (xs : List T) : \Sigma (List T) (List T)
    \elim xs
      | List.nil => (List.nil, List.nil)
      | cons x List.nil => (cons x List.nil, List.nil)
      | cons x (cons y xs) =>
        \let (lhs, rhs) => splitAlmostFast xs
        \in (cons x lhs, cons x rhs)

    \func merge-list (xs ys : List T) : List T \elim xs, ys
      | List.nil, ys => ys
      | xs, List.nil => xs
      | cons x xs, cons y ys => \case cmp x y \with {
        | LT => cons x (merge-list xs (cons y ys)) -- x < y, x at beggining
        | EQ => cons x (merge-list xs (cons y ys)) -- x = y, don't care
        | GT => cons y (merge-list (cons x xs) ys) -- x > y, y at beggining
      }
  }

-- 3. Докажите ассоциативность && и ||

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | true => idp
  | false => idp


\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6

\func fac-proof : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (можно решить любые 2 из 3 задач)

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p _ => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (можно решить любые 2 из 3 задач)

-- t4 : (P -> Q -> R) -> P /\ Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (v : \Sigma P Q) : R => f v.1 v.2

-- t5 : (P or Q -> P /\ Q) -> (P -> Q) /\ (Q -> P)
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => (\lam p => (f (inl p)).2,
                                                                                 \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => f (\lam pqp => pqp (\lam p => f (\lam _ => p)))  -- D:

-- 7. Докажите следующие утверждения

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0) -- hmmm

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam x => h (3, x) -- hmmmmmmmmmmmmm

-- 8. Сформулируйте и докажите следующие утверждения

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x),
-- то существует x : Nat для которого верно Q(x)
\func s3 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> P x -> Q x) (h : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) => (h.1, f h.1 h.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно
\func s4 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam p3 q3 => \case f 3 \with {
    | inl p3->empty => p3->empty p3
    | inr q3->empty => q3->empty q3
  }